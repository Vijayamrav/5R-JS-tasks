
// working with ForEach method
/* forEach is a higher order function which is used to 
traverse the array and also we can access values,indices  simultaneously*/
//callback function is passed as an argument for forEachMethod
// forEach method as three arguments
var primeArray=[2,3,5,7,11,13]; // it is sample array  to practice
primeArray.forEach((value,index,array)=>{  // we are passing callback function as argument with three parameters
    
     console.log(value); // output: 2 3  5 7 11 13
      console.log(index); // output: 0 1 2 3 4 5
      console.log(array); // output: here our primeArray length is 6 so it will print array 6 times
})
// the only drawback of forEach is, forEach cannot store the return value of the method
// if we try to assign a variable to forEach.the variable stores undefined value.
var result=primeArray.forEach((value)=>{
    return value;
})
console.log(result); // output:undefined



// map method
// taking reference primeArray=[2,3,5,7,11,13]
// map method is same as forEach method.
/*the only difference is that we can store the return value of map method in a another variable
the another variable returns new array*/

//working with map method=>

res1=primeArray.map((value,index,array)=>{
    console.log(value); //output:2 3 5 7 11 13
    console.log(index); // output:0 1 2 3 4 5
    return value*2;
    
    
})
console.log(res1);  // output:[4,6,10,14,22,26]

//working with some and every method
/* some() method returns boolean values true or false based on condition 
even if one value satisfies the condition some method returns true*/
// reference array=[2,3,5,7,11,13]
var res=primeArray.some((value)=>{
   return value>5;
})
console.log(res); // output:true

/*every method also returns boolean value just like   some() method but in every method,
if all values satisfies the given condition then only it returns true otherwise false*/

var res1=primeArray.every((value)=>{
    return value>3;
})
console.log(res1); // output:false because 2>3 condition is false

// working with reverse method
// reverse() method reverse the values of array
var numArray=[1,2,3,4,5];
var reversedArray=numArray.reverse();
console.log(reversedArray); // output:[5,4,3,2,1]

// working with sort() method 
var unsortArray=[1,2,33,44,3,444,55];
sortedArray=unsortArray.sort();
console.log(sortedArray); // output:[1,2,3,33,44,444,55] 
/* the output generated by sort() method doesn't sorted the array properly
because normal sort() method doesn't work for larger values

so to overcome this problem we pass callback function in the sort() method*/

sortedArray1=unsortArray.sort((a,b)=>a-b);
console.log(sortedArray1); // output:[1,2,3,33,44,55,444]

// to sort the array in descending order=>
sortedArray2=unsortArray.sort((a,b)=>b-a);
console.log(sortedArray2);











